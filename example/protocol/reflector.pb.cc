// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: reflector.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "reflector.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Reflector {

namespace {

const ::google::protobuf::Descriptor* AckRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckResult_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_reflector_2eproto() {
  protobuf_AddDesc_reflector_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "reflector.proto");
  GOOGLE_CHECK(file != NULL);
  AckRequest_descriptor_ = file->message_type(0);
  static const int AckRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequest, timestamp_),
  };
  AckRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AckRequest_descriptor_,
      AckRequest::default_instance_,
      AckRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(AckRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequest, _is_default_instance_));
  AckResult_descriptor_ = file->message_type(1);
  static const int AckResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckResult, timestamp_),
  };
  AckResult_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AckResult_descriptor_,
      AckResult::default_instance_,
      AckResult_offsets_,
      -1,
      -1,
      -1,
      sizeof(AckResult),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckResult, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckResult, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_reflector_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AckRequest_descriptor_, &AckRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AckResult_descriptor_, &AckResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_reflector_2eproto() {
  delete AckRequest::default_instance_;
  delete AckRequest_reflection_;
  delete AckResult::default_instance_;
  delete AckResult_reflection_;
}

void protobuf_AddDesc_reflector_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017reflector.proto\022\tReflector\"\037\n\nAckReque"
    "st\022\021\n\ttimestamp\030\001 \001(\t\"\036\n\tAckResult\022\021\n\tti"
    "mestamp\030\001 \001(\t2=\n\007Service\0222\n\003ack\022\025.Reflec"
    "tor.AckRequest\032\024.Reflector.AckResultb\006pr"
    "oto3", 164);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "reflector.proto", &protobuf_RegisterTypes);
  AckRequest::default_instance_ = new AckRequest();
  AckResult::default_instance_ = new AckResult();
  AckRequest::default_instance_->InitAsDefaultInstance();
  AckResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_reflector_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_reflector_2eproto {
  StaticDescriptorInitializer_reflector_2eproto() {
    protobuf_AddDesc_reflector_2eproto();
  }
} static_descriptor_initializer_reflector_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int AckRequest::kTimestampFieldNumber;
#endif  // !_MSC_VER

AckRequest::AckRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Reflector.AckRequest)
}

void AckRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AckRequest::AckRequest(const AckRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Reflector.AckRequest)
}

void AckRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  timestamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AckRequest::~AckRequest() {
  // @@protoc_insertion_point(destructor:Reflector.AckRequest)
  SharedDtor();
}

void AckRequest::SharedDtor() {
  timestamp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void AckRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckRequest_descriptor_;
}

const AckRequest& AckRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_reflector_2eproto();
  return *default_instance_;
}

AckRequest* AckRequest::default_instance_ = NULL;

AckRequest* AckRequest::New(::google::protobuf::Arena* arena) const {
  AckRequest* n = new AckRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AckRequest::Clear() {
  timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AckRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Reflector.AckRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string timestamp = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Reflector.AckRequest.timestamp"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Reflector.AckRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Reflector.AckRequest)
  return false;
#undef DO_
}

void AckRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Reflector.AckRequest)
  // optional string timestamp = 1;
  if (this->timestamp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Reflector.AckRequest.timestamp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->timestamp(), output);
  }

  // @@protoc_insertion_point(serialize_end:Reflector.AckRequest)
}

::google::protobuf::uint8* AckRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Reflector.AckRequest)
  // optional string timestamp = 1;
  if (this->timestamp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Reflector.AckRequest.timestamp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->timestamp(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Reflector.AckRequest)
  return target;
}

int AckRequest::ByteSize() const {
  int total_size = 0;

  // optional string timestamp = 1;
  if (this->timestamp().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->timestamp());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AckRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AckRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckRequest::MergeFrom(const AckRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.timestamp().size() > 0) {

    timestamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_);
  }
}

void AckRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckRequest::CopyFrom(const AckRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckRequest::IsInitialized() const {

  return true;
}

void AckRequest::Swap(AckRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckRequest::InternalSwap(AckRequest* other) {
  timestamp_.Swap(&other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckRequest_descriptor_;
  metadata.reflection = AckRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AckRequest

// optional string timestamp = 1;
void AckRequest::clear_timestamp() {
  timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& AckRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:Reflector.AckRequest.timestamp)
  return timestamp_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AckRequest::set_timestamp(const ::std::string& value) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Reflector.AckRequest.timestamp)
}
 void AckRequest::set_timestamp(const char* value) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Reflector.AckRequest.timestamp)
}
 void AckRequest::set_timestamp(const char* value, size_t size) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Reflector.AckRequest.timestamp)
}
 ::std::string* AckRequest::mutable_timestamp() {
  
  // @@protoc_insertion_point(field_mutable:Reflector.AckRequest.timestamp)
  return timestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AckRequest::release_timestamp() {
  
  return timestamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AckRequest::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp != NULL) {
    
  } else {
    
  }
  timestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp);
  // @@protoc_insertion_point(field_set_allocated:Reflector.AckRequest.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int AckResult::kTimestampFieldNumber;
#endif  // !_MSC_VER

AckResult::AckResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Reflector.AckResult)
}

void AckResult::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AckResult::AckResult(const AckResult& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Reflector.AckResult)
}

void AckResult::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  timestamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AckResult::~AckResult() {
  // @@protoc_insertion_point(destructor:Reflector.AckResult)
  SharedDtor();
}

void AckResult::SharedDtor() {
  timestamp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void AckResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckResult_descriptor_;
}

const AckResult& AckResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_reflector_2eproto();
  return *default_instance_;
}

AckResult* AckResult::default_instance_ = NULL;

AckResult* AckResult::New(::google::protobuf::Arena* arena) const {
  AckResult* n = new AckResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AckResult::Clear() {
  timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AckResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Reflector.AckResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string timestamp = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Reflector.AckResult.timestamp"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Reflector.AckResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Reflector.AckResult)
  return false;
#undef DO_
}

void AckResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Reflector.AckResult)
  // optional string timestamp = 1;
  if (this->timestamp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Reflector.AckResult.timestamp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->timestamp(), output);
  }

  // @@protoc_insertion_point(serialize_end:Reflector.AckResult)
}

::google::protobuf::uint8* AckResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Reflector.AckResult)
  // optional string timestamp = 1;
  if (this->timestamp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Reflector.AckResult.timestamp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->timestamp(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Reflector.AckResult)
  return target;
}

int AckResult::ByteSize() const {
  int total_size = 0;

  // optional string timestamp = 1;
  if (this->timestamp().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->timestamp());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckResult::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AckResult* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AckResult>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckResult::MergeFrom(const AckResult& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.timestamp().size() > 0) {

    timestamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_);
  }
}

void AckResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckResult::CopyFrom(const AckResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckResult::IsInitialized() const {

  return true;
}

void AckResult::Swap(AckResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckResult::InternalSwap(AckResult* other) {
  timestamp_.Swap(&other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckResult_descriptor_;
  metadata.reflection = AckResult_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AckResult

// optional string timestamp = 1;
void AckResult::clear_timestamp() {
  timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& AckResult::timestamp() const {
  // @@protoc_insertion_point(field_get:Reflector.AckResult.timestamp)
  return timestamp_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AckResult::set_timestamp(const ::std::string& value) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Reflector.AckResult.timestamp)
}
 void AckResult::set_timestamp(const char* value) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Reflector.AckResult.timestamp)
}
 void AckResult::set_timestamp(const char* value, size_t size) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Reflector.AckResult.timestamp)
}
 ::std::string* AckResult::mutable_timestamp() {
  
  // @@protoc_insertion_point(field_mutable:Reflector.AckResult.timestamp)
  return timestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AckResult::release_timestamp() {
  
  return timestamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AckResult::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp != NULL) {
    
  } else {
    
  }
  timestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp);
  // @@protoc_insertion_point(field_set_allocated:Reflector.AckResult.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Reflector

// @@protoc_insertion_point(global_scope)
